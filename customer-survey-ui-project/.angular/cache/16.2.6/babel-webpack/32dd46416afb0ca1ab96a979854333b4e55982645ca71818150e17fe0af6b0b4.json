{"ast":null,"code":"import * as i0 from \"@angular/core\";\nexport class CustomInterceptor {\n  constructor() {}\n  intercept(request, next) {\n    const localToken = localStorage.getItem('token');\n    request = request.clone({\n      headers: request.headers.set('Authorization', 'bearer ' + localToken)\n    });\n    return next.handle(request);\n  }\n  static #_ = this.ɵfac = function CustomInterceptor_Factory(t) {\n    return new (t || CustomInterceptor)();\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: CustomInterceptor,\n    factory: CustomInterceptor.ɵfac\n  });\n}","map":{"version":3,"names":["CustomInterceptor","constructor","intercept","request","next","localToken","localStorage","getItem","clone","headers","set","handle","_","_2","factory","ɵfac"],"sources":["/Users/saswateesahoo/Repo/AngularUI/AngularCustomerSurvey/customer-survey-ui-project/src/app/custom.interceptor.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport {\n  HttpRequest,\n  HttpHandler,\n  HttpEvent,\n  HttpInterceptor\n} from '@angular/common/http';\nimport { Observable } from 'rxjs';\n\n@Injectable()\nexport class CustomInterceptor implements HttpInterceptor {\n\n  constructor() {}\n\n  intercept(request: HttpRequest<unknown>, next: HttpHandler): Observable<HttpEvent<unknown>> {\n    const localToken = localStorage.getItem('token');\n    request = request.clone({headers: request.headers.set('Authorization' , 'bearer ' + localToken)});\n    return next.handle(request);\n  }\n}\n"],"mappings":";AAUA,OAAM,MAAOA,iBAAiB;EAE5BC,YAAA,GAAe;EAEfC,SAASA,CAACC,OAA6B,EAAEC,IAAiB;IACxD,MAAMC,UAAU,GAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;IAChDJ,OAAO,GAAGA,OAAO,CAACK,KAAK,CAAC;MAACC,OAAO,EAAEN,OAAO,CAACM,OAAO,CAACC,GAAG,CAAC,eAAe,EAAG,SAAS,GAAGL,UAAU;IAAC,CAAC,CAAC;IACjG,OAAOD,IAAI,CAACO,MAAM,CAACR,OAAO,CAAC;EAC7B;EAAC,QAAAS,CAAA,G;qBARUZ,iBAAiB;EAAA;EAAA,QAAAa,EAAA,G;WAAjBb,iBAAiB;IAAAc,OAAA,EAAjBd,iBAAiB,CAAAe;EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}